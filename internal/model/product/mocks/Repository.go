// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	product "ivixlabs.com/goweb/internal/model/product"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: p
func (_m *Repository) CreateProduct(p product.Product) {
	_m.Called(p)
}

// DeleteProduct provides a mock function with given fields: id, userId
func (_m *Repository) DeleteProduct(id string, userId string) int64 {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// FindAllProducts provides a mock function with given fields:
func (_m *Repository) FindAllProducts() []product.Product {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllProducts")
	}

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func() []product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	return r0
}

// FindProductById provides a mock function with given fields: productId
func (_m *Repository) FindProductById(productId string) product.Product {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for FindProductById")
	}

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(string) product.Product); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(product.Product)
		}
	}

	return r0
}

// FindProductsByUserId provides a mock function with given fields: userId
func (_m *Repository) FindProductsByUserId(userId string) []product.Product {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindProductsByUserId")
	}

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func(string) []product.Product); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: ps
func (_m *Repository) UpdateProduct(ps product.Product) {
	_m.Called(ps)
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
